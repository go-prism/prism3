directive @goTag(
    key: String!
    value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Strings

enum Archetype {
    GENERIC
    MAVEN
    GO
    NPM
    ALPINE
    HELM
    RUST
    DEBIAN
    PIP
}

enum Role {
    SUPER
    POWER
}

type RoleBinding {
    id: ID! @goTag(key: "gorm", value: "primaryKey;type:uuid;not null;default:gen_random_uuid()")
    subject: String!
    role: Role!
    resource: String!
}

type User {
    sub: String!
    iss: String!
}

type Artifact {
    id: ID! @goTag(key: "gorm", value: "primaryKey;type:uuid;not null;default:gen_random_uuid()")
    createdAt: Int!
    updatedAt: Int!
    uri: String! @goTag(key: "gorm", value: "index")
    downloads: Int!
    remoteID: ID! @goTag(key: "gorm", value: "index")
    slices: Strings!
}

type Refraction {
    id: ID! @goTag(key: "gorm", value: "primaryKey;type:uuid;not null;default:gen_random_uuid()")
    createdAt: Int!
    updatedAt: Int!
    name: String! @goTag(key: "gorm", value: "unique")
    archetype: Archetype!
    remotes: [Remote!]! @goTag(key: "gorm", value: "many2many:ref_remotes;")
}

type Remote {
    id: ID! @goTag(key: "gorm", value: "primaryKey;type:uuid;not null;default:gen_random_uuid()")
    createdAt: Int!
    updatedAt: Int!
    name: String! @goTag(key: "gorm", value: "unique")
    uri: String!
    archetype: Archetype! @goTag(key: "gorm", value: "index")
    enabled: Boolean! @goTag(key: "gorm", value: "index")
    securityID: ID!
    security: RemoteSecurity!
    transportID: ID!
    transport: TransportSecurity!
}

type RemoteSecurity {
    id: ID! @goTag(key: "gorm", value: "primaryKey;type:uuid;not null;default:gen_random_uuid()")
    allowed: Strings!
    blocked: Strings!
    authHeaders: Strings!
}

type TransportSecurity {
    id: ID! @goTag(key: "gorm", value: "primaryKey;type:uuid;not null;default:gen_random_uuid()")
    name: String! @goTag(key: "gorm", value: "unique")
    ca: String!
    cert: String!
    key: String!
    skipTLSVerify: Boolean!
    httpProxy: String!
    httpsProxy: String!
    noProxy: String!
}

type Overview {
    remotes: Int!
    refractions: Int!
    artifacts: Int!
    storage: Int!
    downloads: Int!
    uptime: Int!
    version: String!

    packages_pypi: Int!
    packages_npm: Int!
    packages_helm: Int!
}

type RemoteOverview {
    artifacts: Int!
    storage: Int!
}

type Query {
    listRemotes(arch: String!): [Remote!]!
    getRemote(id: ID!): Remote!

    listRefractions: [Refraction!]!
    getRefraction(id: ID!): Refraction!

    listTransports: [TransportSecurity!]!

    listArtifacts(remote: ID!): [Artifact!]!
    listCombinedArtifacts(refract: ID!): [Artifact!]!

    getOverview: Overview!
    getRemoteOverview(id: ID!): RemoteOverview!

    getRoleBindings(user: String!): [RoleBinding!]!
    getUsers(role: Role!): [RoleBinding!]!

    getCurrentUser: User!
}

input NewRemote {
    name: String!
    uri: String!
    archetype: Archetype!
    transport: ID!
}

input NewRefract {
    name: String!
    archetype: Archetype!
    remotes: [ID!]!
}

input PatchRefract {
    name: String!
    remotes: [ID!]!
}

input NewRoleBinding {
    subject: String!
    role: Role!
    resource: String!
}

input NewTransportProfile {
    name: String!
    ca: String!
    cert: String!
    key: String!
    skipTLSVerify: Boolean! = false
    httpProxy: String!
    httpsProxy: String!
    noProxy: String!
}

type Mutation {
    createRemote(input: NewRemote!): Remote!
    deleteRemote(id: ID!): Boolean!

    createRefraction(input: NewRefract!): Refraction!
    patchRefraction(id: ID!, input: PatchRefract!): Refraction!
    deleteRefraction(id: ID!): Boolean!

    createRoleBinding(input: NewRoleBinding!): RoleBinding!

    createTransportProfile(input: NewTransportProfile!): TransportSecurity!
}
